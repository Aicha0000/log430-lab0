name: Lab 3 CI

on:
  push:
    branches: [ main, lab3 ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create mock services for Lab 3
      run: |
        mkdir -p "Lab 3/prototype/commun/repositories"
        mkdir -p "Lab 3/prototype/services/administration"
        
        touch "Lab 3/prototype/__init__.py"
        touch "Lab 3/prototype/commun/__init__.py"
        touch "Lab 3/prototype/commun/repositories/__init__.py"
        touch "Lab 3/prototype/services/__init__.py"
        touch "Lab 3/prototype/services/administration/__init__.py"
        
        cat > "Lab 3/prototype/commun/repositories/instances.py" << 'EOF'
class MockObj:
    def __getattr__(self, name): return lambda *args, **kwargs: self
    def __call__(self, *args, **kwargs): return self
    total_general = 1000
    ventes_par_magasin = {}
    produits_plus_vendus = []
    periode = "30 days"

rapports_service = MockObj()
gestion_stocks = MockObj()
gestion_stocks.list_all = lambda: []
gestion_stocks.get_stock = lambda x: None
gestion_stocks.stock_repo = MockObj()
reappro_service = MockObj()
produits_service = MockObj()
EOF
        
        cat > "Lab 3/prototype/services/administration/tableau_bord.py" << 'EOF'
from datetime import datetime
class MockDash:
    date_generation = datetime.now()
    total_reseau = 5000
    performances_magasins = []
    alertes_stock = []
    tendances_hebdomadaires = []
class MockTB:
    def generer_tableau_bord(self): return MockDash()
tableau_bord_service = MockTB()
EOF
    
    - name: Start Lab 3 API server
      run: |
        cd "Lab 3"
        python -c "
import os
os.environ['DATABASE_URL'] = 'sqlite:///test.db'
from production.main import app
import uvicorn
uvicorn.run(app, host='0.0.0.0', port=8000)
        " &
        sleep 10
    
    - name: Wait for API to be ready
      run: |
        for i in {1..15}; do
          if curl -f http://localhost:8000/health; then
            echo "API is ready"
            break
          fi
          echo "Waiting for API... ($i/15)"
          sleep 2
        done
    
    - name: Test Lab 3 API
      run: |
        cd "Lab 3"
        python -c "
import requests
import time
time.sleep(2)

# Test health
resp = requests.get('http://localhost:8000/health')
assert resp.status_code == 200
print('health OK')

# test auth requis
resp = requests.get('http://localhost:8000/api/central')
assert resp.status_code in [401, 403]
print('auth requis OK')

# test avec token valide
headers = {'Authorization': 'Bearer lab3-static-token'}
resp = requests.get('http://localhost:8000/api/central', headers=headers)
assert resp.status_code == 200
print('auth valide OK')

# test docs
resp = requests.get('http://localhost:8000/docs')
assert resp.status_code == 200
print('docs OK')

print('tests lab3 OK')
        "